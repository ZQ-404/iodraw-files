{"root":{"data":{"id":"d0su8xfyug00","created":1714011161746,"text":"微信小程序+uniapp"},"children":[{"data":{"id":"d0su9f79azc0","created":1714011200401,"text":"微信小程序"},"children":[{"data":{"id":"d0tnm8qdbkg0","created":1714094017241,"text":"说一下小程序的生命周期","note":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"children":[{"data":{"id":"d0ttc65mtm00","created":1714110154651,"text":"应用生命周期","note":"应用生命周期应用声明周期：生命周期函数是在app.js里面调用的，App(Object)函数用来注册一个小程序。\n\n一共七个子生命周期：\nonLaunch（）小程序初始化的时候触发\nonShow()   启动，后台进入前台\nonHide()   前台进入后台\nonError()  脚本报错，API调用报错\nonPageNotFound()   打开的页面不存在的时候触发\nonUnhandledRejection() 小程序有未处理的Promise拒绝时触发\nonThemeChange 系统主题切换是触发"},"children":[]},{"data":{"id":"d0ttce9tzy00","created":1714110172319,"text":"页面生命周期","note":"页面生命周期：每次进入和切换新页面的时候，App(Object)函数用来注册一个页面\nonReady：监听页面初次渲染完成，获取页面元素（少用）\nonLoad：  监听页面加载，发送请求获取数据\nonShow：监听页面显示，请求数据\nonHide：监听页面隐藏，终止任务，如定时器或者播放音乐\nonUnload:监听页面卸载,终止任务"},"children":[]},{"data":{"id":"d0ttchnkxcw0","created":1714110179681,"text":"组件生命周期","note":"组件生命周期：组件自身的函数，通过Component(Object)进行注册组件\n\n\n组件里面监听页面的事件：\ncreated：监听页面加载\nattached：监听页面显示（鹅她七得）\nready：监听页面初次渲染完成\nmoved：监听页面隐藏\ndetached：监听页面卸载\nerror：每当组件方法抛出错误时执行\n\n组件生命周期使用的时候的注意事项：\n1、created 生命周期被触发，this.data可以访问，但是访问不到setData\n\n2、attached  this.data已被初始化完成，是组件当前的值\n\n3、detached 离开页面时触发这个事件"},"children":[]},{"data":{"id":"d0ttcq5oatk0","created":1714110198189,"text":"组件所有页面生命周期","note":"有时组件需要获知页面状态，以便组件内部处理。\n这个时候就需要用到组件所在页面的生命周期：\npageLifetimes 定义段中定义，如下：\n\n生命周期\t说明\nshow\t组件所在的页面被展示时执行\nhide\t组件所在的页面被隐藏时执行\n\nComponent({\n  pageLifetimes: {\n    show: function() {\n      // 页面被展示\n    },\n    hide: function() {\n      // 页面被隐藏\n    },\n  }\n})"},"children":[]},{"data":{"id":"d0tufy73bt40","created":1714113271891,"text":"执行过程","note":"应⽤的⽣命周期执行过程：\n⽤户⾸次打开⼩程序，触发 onLaunch（全局只触发⼀次）\n\n⼩程序初始化完成后，触发onShow⽅法，监听⼩程序显示\n\n⼩程序从前台进⼊后台，触发 onHide⽅法\n\n⼩程序从后台进⼊前台显示，触发 onShow⽅法\n\n⼩程序后台运⾏⼀定时间，或系统资源占⽤过⾼，会被销毁\n\n#⻚⾯⽣命周期的执行过程：\n⼩程序注册完成后，加载⻚⾯，触发onLoad⽅法\n⻚⾯载⼊后触发onShow⽅法，显示⻚⾯\n⾸次显示⻚⾯，会触发onReady⽅法，渲染⻚⾯元素和样式，⼀个⻚⾯只会调⽤⼀次\n当⼩程序后台运⾏或跳转到其他⻚⾯时，触发onHide⽅法\n当⼩程序有后台进⼊到前台运⾏或重新进⼊⻚⾯时，触发onShow⽅法\n当使⽤重定向⽅法 wx.redirectTo() 或关闭当前⻚返回上⼀⻚wx.navigateBack()，触发onUnload\n当存在也应用生命周期和页面周期的时候，相关的执行顺序如下：\n\n打开小程序：(App)onLaunch --> (App)onShow --> (Pages)onLoad --> (Pages)onShow --> (pages)onRead\n\n进入下一个页面：(Pages)onHide --> (Next)onLoad --> (Next)onShow --> (Next)onReady\n\n返回上一个页面：(curr)onUnload --> (pre)onShow\n\n离开小程序：(App)onHide\n\n再次进入：小程序未销毁 --> (App)onShow(执行上面的顺序），小程序被销毁，（App)onLaunch重新开始执行.\n"},"children":[]}]},{"data":{"id":"d3mb8nq72qg0","created":1724316655088,"text":"说说你对微信小程序的理解？优缺点","note":"优点：不用安装，存在与各个APP或者手机系统内部，通过搜索直接打开。不用考虑兼容等问题。\n\n缺点：小程序的大小是受限制的"},"children":[]},{"data":{"id":"d3mygdophp40","created":1724382145672,"text":"小程序中路由跳转的方式有哪些？都有什么区别","note":"在小程序中每个页面都是一个pageModel，pageModel都是通过栈的形式去管理的。\n\n小程序的跳转方式如下：\nwx.navigateTo(Object)\n介绍：表示保留当前页面，跳转到应用内的某个页面。wx.navigateBack可以返回原来的页面。\n使用场景：页面不是非常多的时候，可以使用这个跳转方式，页面多的时候不使用这个跳转方式。\n参数：url  events success \tfail complete\n\nwx.redirectTo(Object)：\n介绍：重定向，关闭当前页面，跳转到指定的页面。但是之前的页面会销毁，增加了页面的显示时间。\n使用场景：页面栈用完，或者不需要当前记录的时候。\n参数：url success（接口调用成功之后执行） fail（接口调用失败之后执行） complete（接口调用结束，不管成功还是失败都会执行）\n\nwx.switchTab(Object)\n介绍：跳转到tabBar页面，并关闭其他所有不是tabBar的页面。\n使用场景：需要切换到tabBar页面的时候使用。\n参数：url success（接口调用成功之后的回调） fail（接口回调失败之后的回调） complete（接口成功和失败之后都会执行的回调）。\n\nwx.navigatBack(Object)\n介绍：用于关闭当前页面，返回上一级或者多级页面。可以通过getCurrentPages() 获取当前的页面栈数。\n使用场景：返回上一级或者多级页面。\n参数：delta（返回的页面数，这个值大于当前的栈数，则返回的首页）  success  fail complete。\n\nwx.reLaunch(Object)\n介绍：关闭所有页面，打开应用内某个页面\n使用场景：重新加载\n参数：url success  fail  complete\n\n\n这些跳转方式和页面栈的关系：\nnavigateTo 新页面入栈\nredirectTo 当前页面出栈，新页面入栈\nnavigateBack 页面不断出栈\nswitchTab  页面全部出栈，留下新的Tab页面\nreLanch  页面全部出栈，留下新的\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"children":[]},{"data":{"id":"d3r5dpc1fdc0","created":1724807923530,"text":"说说提高微信小程序应用速度的手段有哪儿些？","note":"小程序首次启动时，一些基础库的初始化以及线程的运行。\n然后才开始进入启动状态，启动状态，会有加载中的loading图标出现。\n\n启动过程有三个动作：下载小程序代码包、加载小程序代码包、初始化小程序首页。\n\n提高速度的手段：\n\n1加载：控制代码包体积大小，包含的动作有：压缩代码、删除无用的代码、删除无用的资源文件、减少图片的大小和数量。\n分包按需加载。首页这种放在主包里面，不常用的放入到子包里面。子包不易太大，可以在主包加载完毕之后进行预加载。\n\n\n2渲染：异步数据请求放在onload中、减少htpps请求，可以的话讲数据使用getStorageSync和setStorageSync先将数据存储在本地、前置页面的一些数据带到下一页进行渲染，比如列表页到详情页面、正确的使用setData:\n多次setData合并成一次setData；\n一些数据结果复杂，或者包含长字符串，就不使用setData去设置这些数据；\n与页面无关的一些数据不用设置到Data中可以设置在page或者其他的一些对象中、\n使用组件，每个组件都有自己独立的setData使用。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"children":[]},{"data":{"id":"d3r7mhmcy000","created":1724814254237,"text":"微信小程序的登录流程","note":"微信提供登录，快速建立小程序内用户体系，实现登陆。\n小程序用户体系有两个概念分别是openid和code的概念：\n调用wx.login()方法会生产code，\n后端将code 和appid传递给微信服务器指定的接口会获得session_key和openid.后端生产3rd_session 之后3rd_session作为key，session_key +openId作为value，写到session中\n服务端将3rd_session 传给客户端。之后小程序和后端可以通过3rd_session验证登录状态是否失效，和拿到openID和session_key 就可以标识客户系统了。\n\n对于每个小程序，微信会将用户的的微信ID映射出一个小程序openID，作为用户在这个小程序上的唯一标识。\n\nwx.login()获取用户的code判断用户是否授权读取用户信息，调用wx.getUserInfo 读取用户数据。\n","image":"https://static.vue-js.com/c3cfbb70-3428-11ec-8e64-91fdec0f05a1.png","imageTitle":"","imageSize":{"width":200,"height":183}},"children":[]},{"data":{"id":"d3s1sbjudqg0","created":1724899344507,"text":"说说微信小程序的发布流程"},"children":[]}]},{"data":{"id":"d0su9ig7m940","created":1714011207473,"text":"uniapp"},"children":[]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}