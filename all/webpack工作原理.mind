{"root":{"data":{"id":"czv6yr12qv40","created":1710594000045,"text":"webpack工作原理"},"children":[{"data":{"id":"czv71nd5fnk0","created":1710594227160,"text":"webpack打包的流程？","note":"webpack 是一个串行过程，它的工作流程就是将各个插件串联起来。\n\nwebpack 的构建流程：\n1、初始化流程：配置文件中读取参数、shell 语句合并参数、初始化插件在执行环境中所需要的参数；\n2、编译构建流程：从 Entry 发出，调用对应 Loader 去翻译文件内容，在找到对应 Module 去递归编译处理；\n3、输出流程：编译之后 Module 组合成 Chunk，把 Chunk 转换成文件，输出文件系统。\n\n\n\n"},"children":[]},{"data":{"id":"czv71qod47k0","created":1710594234369,"text":"说一下webpack Loader","note":"webpack中的\n\n\nLoader特性：\n\n\n常见的Loader："},"children":[{"data":{"id":"czxdfnwptlk0","created":1710815372015,"text":"Loader是什么","note":"loader 对css、sass、png等这些类型的文件进行文件内容的解析。扩展了webpack的打包能力"},"children":[]},{"data":{"id":"czxdfv2fvbc0","created":1710815387598,"text":"Loader特性","note":"loader支持链式调用，最终变为js代码。\nloader 可以是同步的，也可以是异步的。\nloader 运行在 Node.js 中，并且能够执行任何操作。\nloader 能够产生额外的任意文件。\n可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。压缩、打包、语言翻译和更多其他特性。"},"children":[]},{"data":{"id":"czxdfxxijbc0","created":1710815393831,"text":"常见的Loader","note":"style-loader: 将css添加到DOM的内联样式标签style里。\n\ncss-loader :允许将css文件通过require的方式引入，并返回css代码\n\nless-loader: 处理less\n"},"children":[]}]},{"data":{"id":"czv71utfcoo0","created":1710594243382,"text":" "},"children":[]},{"data":{"id":"czv71z63ej40","created":1710594252855,"text":"你知道哪些 webpack loader， plugin？"},"children":[]},{"data":{"id":"czxdef1ekw00","created":1710815274343,"text":"webpack热更新原理？"},"children":[]},{"data":{"id":"czxdei2ue5s0","created":1710815280960,"text":"webpack loader 和 plugin区别？"},"children":[]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}