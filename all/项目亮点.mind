{"root":{"data":{"id":"d0em5i4irc00","created":1712566485037,"text":"项目亮点"},"children":[{"data":{"id":"d0em7t0xpyg0","created":1712566665493,"text":"安徽农信"},"children":[{"data":{"id":"d0em88d8xtk0","created":1712566698889,"text":"大文件分片上传","note":"参考这个博客：\nBlob.slice\nhttps://juejin.cn/post/6844904046436843527\n借助sparkMD5\n\n"},"children":[]},{"data":{"id":"d0em9b1eetk0","created":1712566783067,"text":"vuex状态管理：账号和keepalive的实现"},"children":[]},{"data":{"id":"d0em9qdfqnk0","created":1712566816447,"text":"mixins 实现拒绝复制、token、分页"},"children":[]},{"data":{"id":"d0ema53tix40","created":1712566848517,"text":" husky 和 lint-staged 实现代码规范限制","note":"代码规范这里总体三个步骤：\n1、安装lint-staged ，在package.json里面完成配置。 \n2、安装husky。\n3、创建pre-commit 钩子，将lint-staged 关联到声明pre-commit钩子上。（npx husky add .husky/pre-commit \"npx lint-staged\"）   \n上述三步，就可以让团队成员在代码提交之前进行统一的代码格式化。\n\n水印添加与回收思路：\n1、创建一个canvas ，画上自己想要的水印样式。\n2、创建一个元素节点（宽高等于当前屏幕，可设置内边距）。\n3、canvas转换成Img，作为第2步骤的背景图片，并进行平铺。\n4、将元素接口appendChild到body节点下面。\n5、在App.vue的mounted声明周期中调用上述导出的函数。"},"children":[]},{"data":{"id":"d0emai60pao0","created":1712566876948,"text":"样式的 JSON 数据之后，动态渲染到活动页面"},"children":[]},{"data":{"id":"d0emaq9t05c0","created":1712566894591,"text":"多角色权限管理、多角色动态表单实现"},"children":[]},{"data":{"id":"d0emawsiiig0","created":1712566908783,"text":"大转盘指针转动的动画处理，九宫格转动的动画处理"},"children":[]},{"data":{"id":"d0emb0oim1s0","created":1712566917249,"text":"H5 页面在不同手机中的兼容问题"},"children":[]}]},{"data":{"id":"d0em7xyp2lc0","created":1712566676241,"text":"企业网银"},"children":[{"data":{"id":"d0emcvcno9s0","created":1712567062376,"text":"产品水印添加和回收"},"children":[]},{"data":{"id":"d0emd2m8rc00","created":1712567078193,"text":"工资单一级表头的固定性、二级表头客户自定义的问题"},"children":[]},{"data":{"id":"d0emd7zo7hs0","created":1712567089889,"text":"组件递归，实现了 APP 部门通讯录选择页面"},"children":[]},{"data":{"id":"d0emdmy2oo00","created":1712567122444,"text":"<el-tree>树形控件，开发用户自定义工资模块"},"children":[]},{"data":{"id":"d0emducbilk0","created":1712567138543,"text":"他行授权，参数拼接 URL，通过拼接的 URL，发起登录（全局守卫，校验 token"},"children":[]}]},{"data":{"id":"d0em84nv6y80","created":1712566690824,"text":"皖新"},"children":[{"data":{"id":"d0emc9vmdsg0","created":1712567015633,"text":"前端自动部署脚本","note":"前端自动化部署（自动化部署 ①）https://blog.csdn.net/qxfjyk/article/details/107845452  + https://zhuanlan.zhihu.com/p/339507164+ https://www.nodeapp.cn/assert.html\n1、打包 npm run build 去打包项目    \n2、压缩 archiver将dist压缩成zip\n3、连接到ssh  node-ssh  ssh.connect 链接到服务器上\n4、zip包上传   ssh.upFile 将zip文件上传到服务器上\n5、zip包解压   ssh.execCommand 将服务器上的zip文件解压出来\n6、zip包本地删除  fs.unlink删除掉本地的压缩包\n\n前端自动化部署（自动化部署、即脚手架搭建上传 ②）\n新建一个项目文件\n在这个文件的根上面npm init -y 生成 package.json 文件\n配置bin main 等必要的配置项\n调试的时候npm link 运行即可，通过自定义的bin指令进行调试\n发布 npm publish --F Mymortal-cli \n安装 npm i mortal-cli -D\n使用 mortal XXX\n\n\n自动化部署，依赖包 node-ssh（连接到服务器） fs（文件读取） path（路径操作） archiver（文件压缩）  这个过程涉及到四个包","layout_left_offset":{"x":-82.99999752640741,"y":-62.00000721216185}},"children":[]},{"data":{"id":"d0gy97sh8ww0","created":1712803749229,"text":"脚手架搭建","note":"手脚架搭建，\nfs 文件夹管理\n需要第三方库有：\nchalk(美化字体样式)\nconst {program}=('commonder');   （控制台指令） \nprogram.option 配置指令,比如\nprogram.comm\ninquirer （用于用户交互选择配置）\nGit clone (拉取代码）\nora 限制loading动画\n      艺术字依赖包\n\n之后就是在bin里面，声明一个js文件     执行指令的时候就是执行的这个js文件\n\n\n参考文档 ：https://juejin.cn/post/7260144602471776311","layout_left_offset":{"x":-159.99999523162853,"y":-57.99999827146536}},"children":[]},{"data":{"id":"d0h3j46ben40","created":1712818630550,"text":"通过对axios的request函数封装，实现了token参数自动添加，简化开发请求的流程，节约团队开发时间约10%。","layout_left_offset":{"x":-27.00000059604656,"y":-48.99999853968632},"note":"1、新建一个token.js文件导出三个函数token请求存储（交易码作为对象属性的key）、token返回、判断当前API的token是否存在。\n2、开发的是时候请求分成需要jwt和不需要jwt的请求，jwt请求调用token获取，交易码作为参数。\n3、axios的request 进行拦截，如果jwt类型的交易，判断当前交易码的token是否存在存在的话就把token拿出来合并到上送参数里面。"},"children":[]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}