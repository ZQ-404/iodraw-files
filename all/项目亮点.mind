{"root":{"data":{"id":"d0em5i4irc00","created":1712566485037,"text":"项目亮点"},"children":[{"data":{"id":"d0em7t0xpyg0","created":1712566665493,"text":"安徽农信"},"children":[{"data":{"id":"d0em88d8xtk0","created":1712566698889,"text":"大文件分片上传","note":"参考这个博客：\nBlob.slice\nhttps://juejin.cn/post/6844904046436843527\n借助sparkMD5 和web work\nhttps://juejin.cn/post/7273803674789953575\nB站视频\nhttps://www.bilibili.com/video/BV1Bu411t7ju/?spm_id_from=333.337.search-card.all.click\n\n"},"children":[]},{"data":{"id":"d0em9b1eetk0","created":1712566783067,"text":"实现vuex持久化；跨页面操作keepalive。","note":"一：\n1、使用vuex处理keepAlive的原因：\n因为表单处理有表单、录入页、确认页、结果页。很多时候需要在确认页面，保存列表页和录入页的状态。靠路由守卫就不能对实现跨页面操作keepAlive，需要用到vuex进行全局状态管理。\n\n2、建立一个vuex的page模块：\nkeepAliveList数组用于存储需要被缓存的组件的name，封装对数组进行添加、删除、刷新的mutation。\n\n3、使用keep-alive标签包裹view-router，include这个数组即可。\n\n二：\nvuex管理用户状态，但是在页面刷新的时候会消失。下面有两种方法：\n1、可以在main.js里面对unload进行监听，将sate存储到localStorage中。\n这个main入口文件中，首先对localStorage进行查询，如果存在，就调用store.replaceState({}),然后在对localStorage里面的内容进行remove。\n--------代码如下\n// 在页面刷新时将store中的数据保存到localStorage中\nwindow.addEventListener('beforeunload', () => {\n  localStorage.setItem('vuex_state', JSON.stringify(store.state));\n});\n\n// 从localStorage中恢复数据到store中\nconst savedState = JSON.parse(localStorage.getItem('vuex_state'));\nif (savedState) {\n  store.replaceState(savedState);\n}\n-------\n\n2、第二中就是调用store.subscribe监听整个的mutation 发生变化就将state存储到localStorage当中，如果localStorage当中存在state，就取出来，调用store.replaceState（）\n\n\n代码如下---\n// 在页面加载时，从本地存储中获取数据并恢复到 Vuex store\nconst savedState = JSON.parse(localStorage.getItem('vuex_state'));\nif (savedState) {\n  store.replaceState(savedState);\n}\nstore.subscribe((mutation, state) => {\n  localStorage.setItem('vuex_state', JSON.stringify(state));\n});\n\n\n\n\n"},"children":[]},{"data":{"id":"d0em9qdfqnk0","created":1712566816447,"text":"mixins 实现拒绝复制、表格分页","note":"1、拒绝复制的实现：\n首先、在字典文件中维护了两个信息，一个是交易名称对应录入页面路径，一个是交易名称对应方法名称。\n\n第二、拒绝列表页面，点击复制，存储表单信息，并从字典中找到对应的录入页面进行跳转。\n\n第三、在mixins 文件夹里面新建一个resumit.js ，在里面声明两个路由钩子分别是beforeRouteEnter  和  beforeRouteLeave。\n在beforeRouteEnter里面判断是否是从拒绝列表页面进入，如果是从拒绝页面进入，找到交易名称对应的方法。localStorage里面取出表单信息作为参数，调用这个方法。beforeRouteLeave里面remove掉表单信息。\n\n第四、将mixins混入到有拒绝复制功能的录入页面中。\n\n\n2、表格分页的实现\n提前写入分页组件的翻页方法、页面大小改变的方法、列表查询方法，以及其他一些先关的参数。并在created周期中调用列表查询方法。\n后面再列表查询页面中混入，改写查询即可，不需要写额外的代码。"},"children":[]},{"data":{"id":"d0ema53tix40","created":1712566848517,"text":" husky 和 lint-staged 实现代码规范限制","note":"代码规范这里总体三个步骤：\n1、安装lint-staged ，在package.json里面完成配置。 \n2、安装husky。\n3、创建pre-commit 钩子，将lint-staged 关联到声明pre-commit钩子上。（npx husky add .husky/pre-commit \"npx lint-staged\"）   \n上述三步，就可以让团队成员在代码提交之前进行统一的代码格式化。\n\n水印添加与回收思路：\n1、创建一个canvas ，画上自己想要的水印样式。\n2、创建一个元素节点（宽高等于当前屏幕，可设置内边距）。\n3、canvas转换成Img，作为第2步骤的背景图片，并进行平铺。\n4、将元素接口appendChild到body节点下面。\n5、在App.vue的mounted声明周期中调用上述导出的函数。"},"children":[]},{"data":{"id":"d0emai60pao0","created":1712566876948,"text":"样式的 JSON 数据之后，动态渲染到活动页面","note":"主要是维护一些很多套样式表。在后端上对游戏页面的素材进行更换、字体样式、背景颜色进行更换。\n在后管的编辑页面以及H5的页面上将样式表绑定到对应的地位，保证样式的正确回显都页面上。\n\n\n允许根据不同季节或特定时机发布主题样式活动，提高用户体验。"},"children":[]},{"data":{"id":"d0emaq9t05c0","created":1712566894591,"text":"多角色权限管理、多角色动态表单实现","note":"1、多角色权限管理路由管理：\n路由树是由后端返回，前端负责渲染。\n\n2、多角色按钮管理：\n用户登录vuex中存储他的角色。\ndirective 上自定义一个指令permission。按钮上传递当前按钮拥有权限的角色数组。permission中判断当前登录用户角色在不在数组中，在数组中就removeChild节点，如果在就不做处理。\n代码看地址：https://github.com/PanJiaChen/vue-element-admin/blob/master/src/directive/permission/permission.js\n\n3、多角色动态表单的实现：\n不同的角色归类总结出动态表单规律，总结出7个表单对象数组，对象属性中包含了表单的label、v-model需要绑定的key 、placeholder、最大输入长度、校验规则。\n（输入框不同、表头不同、校验的规则不同）\n新建一个表格循环数组，将数组渲染到表格上，显示多角色动态表单。\n\n"},"children":[]},{"data":{"id":"d0emawsiiig0","created":1712566908783,"text":"大转盘指针转动的动画处理，九宫格转动的动画处理","note":"1、九宫格：写一个遮罩层块，绑定一个动态的class选择器，然后隐藏掉。\n预先写出8中动画，配置出8个class选择器。然后根据后端返回的奖品结果，动态的去使用不同的class,执行不同的选择器。\n\n\n2、大转盘转动动画：\ntransform: rotate(0deg);\n\n根绝后端设置的奖品个数，计算每个奖品占据的角度。根绝不同中奖等级，预先写好class选择器，之后等待服务端中奖结果执行对应rotate动画。"},"children":[]},{"data":{"id":"d0emb0oim1s0","created":1712566917249,"text":"H5 页面在不同手机中的兼容问题","note":"----------------------\niPhone6 手机上不显示导航栏和一些封装好的组件，通过排查发现是\ncss样式中设置了min-height:100%属性，最后将min-height:100%属性改成height属性即可。\n\n------------------\n\niPhone6活动列表超出屏幕之外，显示不出来\n-webkit-overflow-scrolling: touch;---》改为auto\n\n参照这个：https://blog.csdn.net/qq_40184012/article/details/81353777\n\n---------------\nIOS手机登录退出 登录退出 会出现白屏，"},"children":[]}]},{"data":{"id":"d0em7xyp2lc0","created":1712566676241,"text":"企业网银"},"children":[{"data":{"id":"d0emcvcno9s0","created":1712567062376,"text":"产品水印添加和回收","note":"回看自己的博客：\nhttps://www.cnblogs.com/zhao-qin/p/17700917.html"},"children":[]},{"data":{"id":"d0emd2m8rc00","created":1712567078193,"text":"工资单一级表头的固定性、二级表头客户自定义的问题"},"children":[]},{"data":{"id":"d0emd7zo7hs0","created":1712567089889,"text":"组件递归，实现了 APP 部门通讯录选择页面"},"children":[]},{"data":{"id":"d0emdmy2oo00","created":1712567122444,"text":"<el-tree>树形控件，开发用户自定义工资模块"},"children":[]},{"data":{"id":"d0emducbilk0","created":1712567138543,"text":"他行授权，参数拼接 URL，通过拼接的 URL，发起登录（全局守卫，校验 token"},"children":[]}]},{"data":{"id":"d0em84nv6y80","created":1712566690824,"text":"皖新"},"children":[{"data":{"id":"d0emc9vmdsg0","created":1712567015633,"text":"前端自动部署脚本","note":"前端自动化部署（自动化部署 ①）https://blog.csdn.net/qxfjyk/article/details/107845452  + https://zhuanlan.zhihu.com/p/339507164+ https://www.nodeapp.cn/assert.html\n1、打包 npm run build 去打包项目    \n2、压缩 archiver将dist压缩成zip\n3、连接到ssh  node-ssh  ssh.connect 链接到服务器上\n4、zip包上传   ssh.upFile 将zip文件上传到服务器上\n5、zip包解压   ssh.execCommand 将服务器上的zip文件解压出来\n6、zip包本地删除  fs.unlink删除掉本地的压缩包\n\n前端自动化部署（自动化部署、即脚手架搭建上传 ②）\n新建一个项目文件\n在这个文件的根上面npm init -y 生成 package.json 文件\n配置bin main 等必要的配置项\n调试的时候npm link 运行即可，通过自定义的bin指令进行调试\n发布 npm publish --F Mymortal-cli \n安装 npm i mortal-cli -D\n使用 mortal XXX\n\n\n自动化部署，依赖包 node-ssh（连接到服务器） fs（文件读取） path（路径操作） archiver（文件压缩）  这个过程涉及到四个包","layout_left_offset":{"x":-82.99999752640741,"y":-62.00000721216185}},"children":[]},{"data":{"id":"d0gy97sh8ww0","created":1712803749229,"text":"脚手架搭建","note":"手脚架搭建，\nfs 文件夹管理\n需要第三方库有：\nchalk(美化字体样式)\nconst {program}=('commonder');   （控制台指令） \nprogram.option 配置指令,比如\nprogram.comm\ninquirer （用于用户交互选择配置）\nGit clone (拉取代码）\nora 限制loading动画\n      艺术字依赖包\n\n之后就是在bin里面，声明一个js文件     执行指令的时候就是执行的这个js文件\n\n\n参考文档 ：https://juejin.cn/post/7260144602471776311","layout_left_offset":{"x":-159.99999523162853,"y":-57.99999827146536}},"children":[]},{"data":{"id":"d0h3j46ben40","created":1712818630550,"text":"通过对axios的request函数封装，实现了token参数自动添加，简化开发请求的流程，节约团队开发时间约10%。","layout_left_offset":{"x":-27.00000059604656,"y":-48.99999853968632},"note":"1、新建一个token.js文件导出三个函数token请求存储（交易码作为对象属性的key）、token返回、判断当前API的token是否存在。\n2、开发的是时候请求分成需要jwt和不需要jwt的请求，jwt请求调用token获取，交易码作为参数。\n3、axios的request 进行拦截，如果jwt类型的交易，判断当前交易码的token是否存在存在的话就把token拿出来合并到上送参数里面。"},"children":[]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}