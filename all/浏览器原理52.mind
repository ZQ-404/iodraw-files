{"root":{"data":{"id":"czsdwlfixrc0","created":1710308899029,"text":"浏览器原理"},"children":[{"data":{"id":"czsisb5wxao0","created":1710322668773,"text":"浏览器安全"},"children":[{"data":{"id":"czsism059yg0","created":1710322692369,"text":"什么是XSS","note":"XSS解释：\n跨站脚本攻击（代码注入，浏览器没有办法过滤，执行了恶意代码）。\n\n恶意代码可能会造成的问题：\n1、获取缓存的数据，如DOM、cookie、localStorage；\n2、DOS攻击，发送请求，占用服务器资源，从而使用户无法访问服务器；\n3、破坏页面结构；\n4、流量劫持（将链接指向某网站）；\n\nXSS攻击方式有三种：\n1、存储型（恶意脚本会存储在目标服务器上，浏览器请求回来之后，执行恶意脚本）\n2、反射型（诱导用户访问一个带有恶意代码的 URL 。目标服务器那边把带有恶意代码的数据发送到浏览器端）\n3、DOM节点型（修改页面的 DOM 节点形成的 XSS）\n\n三者的区别：\n反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在 URL ⾥。\nDOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。\n"},"children":[]},{"data":{"id":"czsisw86c340","created":1710322714622,"text":"如何防御XSS","note":"浏览器这边的处理：\n1、纯前端的方式，不用服务器端拼接返回（不使用服务端渲染）。\n2、对需要插入到 HTML 中的代码做好充分的转义，数据获取渲染和字符串拼接的时候判断预防恶意代码。\n\n借助CSP（内容安全策略）：\n本质：\n建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。\n配置规则的方式有两种：\n一种是设置 HTTP 首部中的 Content-Security-Policy。\n一种是设置 meta 标签的方式。\n\n一些敏感信息进行保护：\n比如 cookie 使用 http-only，使得脚本无法获取。\n使用验证码，避免脚本伪装成用户执行一些操作。\n"},"children":[]},{"data":{"id":"czsit3dwdfk0","created":1710322730206,"text":"什么是CSRF","note":"CSRF 攻击指的是跨站请求伪造攻击。\n本质：\n利用 cookie 会在同源请求中携带发送给服务器的特点，冒充用户去发送攻击请求给到第三方。（只能利用 cookie，但是不能访问获取 cookie ）\n\n攻击类型：\nGET 类型的 CSRF 攻击，比如在网站中的一个 img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交。\nPOST 类型的 CSRF 攻击，比如构建一个隐藏的表单，当用户进入页面时，自动提交这个表单。\n链接类型的 CSRF 攻击，比如在 a 标签的 href 属性里构建一个请求，诱导用户去点击。"},"children":[]},{"data":{"id":"czsitz58zw00","created":1710322799340,"text":"怎么去防御CSRF","note":"进行同源检测：http 请求头中 origin 或者 referer 字段来判断是否同源，从而过滤出恶意网站。\n缺点：referer可以被伪造。可以伪造成搜索引擎的链接。搜索引擎链接屏蔽也不好，不屏蔽也不好。\n\n使用 CSRF Token 进行验证:\n服务器向用户返回一个随机数 Token，用户再次发起请求时，在请求参数中需要加token。\n缺点：\n所有请求都添加上这个 token，操作比较繁琐。\n如果超出负载，求经过负载平衡转移到了其他的服务器，但是这个服务器的 session 中没有保留这个 token 的话，就没有办法验证。\n\n对 Cookie 进行双重验证：\n利用了攻击者只能利用 cookie，但是不能访问获取 cookie 的特点。\n用户第一次访问服务器，向请求域名注入一个Cookie。用户再次请求需要将Cookie\t拼接到URL参数中。\n方便并且不涉及到分布式访问的问题。\n缺点：\nXSS漏洞的时候失效。\n不能做到子域名的隔离。\n\n\n"},"children":[]},{"data":{"id":"czsiu6vkva80","created":1710322816169,"text":"什么是中间人攻击，如何防御中间人攻击","note":"在中间⼈攻击中，攻击者可以拦截通讯双⽅的通话并插⼊新的内容。\n\n攻击的流程：\n用户发送握手请求，中间人截获。\n服务器发送公钥，中间人拦截，保留。伪造公钥发送给中间人。\n用户拿到伪造密钥，⽣成加密hash值发给服务器。中间人拦截，用自己得私钥解密。伪造恶意请求，使用保留的公钥加密发送。\n服务器解密之后，发送加密数据给客户端。"},"children":[]},{"data":{"id":"czsiulqzh800","created":1710322848543,"text":"有哪些可能会影响前端安全的问题","note":"iframe的滥⽤\n跨站脚本 XSS\n跨站伪造请求 CSRF\n恶意第三⽅库"},"children":[]},{"data":{"id":"czsiv073xdk0","created":1710322879993,"text":"网络劫持有哪几种，如何防范","note":"⽹络劫持分为两种:\n（1）DNS劫持: (输⼊京东被强制跳转到淘宝这就属于dns劫持)\nDNS强制解析: 通过修改运营商的本地DNS记录，来引导⽤户流量到缓存服务器\n302跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302跳转的回复，引导⽤户获取内容\n\n（2）HTTP劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的http响应内容(即加⼴告)\n\nDNS劫持由于涉嫌违法，已经被监管起来。预防HTTP劫持的好方法，就是明文改成加密传输。"},"children":[]}]},{"data":{"id":"czsivr9vutc0","created":1710322938934,"text":"进程与线程"},"children":[{"data":{"id":"czsiw1r6xqg0","created":1710322961748,"text":"进程与线程的概念","note":"进程：是指 CPU 在运行指令、加载和保存上下文所需的时间。\n\n线程：是进程中的更小单位，描述了执行一段指令所需的时间。\n\n进程是资源分配的最小单位，线程是CPU调度的最小单位。\n\n特点：\n进程之间相互隔离，一个进程崩溃了，不影响其他进程。\n任意一个线程出现问题，导致整个进程崩溃。\n线程之间共享进程中的数据。\n进程关闭之后，操作系统会回收进程占用的内存。\n\n1个浏览器主进程：负责界面显示、用户交互、子进程管理，同时提供存储等功能。\n多个渲染进程：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页。\n多个插件进程：主要是负责插件的运行。\n一个网络进程：主要负责页面的网络资源加载。\n一个GPU进程:绘制UI 界面、 3D CSS 的效果。\n\n所以打开一个网页，至少需要四个进程\n\n浏览器使用多进程模式的优点和缺点\n优点：稳定，不容易崩掉\n缺点：占用更多的资源"},"children":[]},{"data":{"id":"czsiwamx3p40","created":1710322981081,"text":"进程与线程的区别","note":"1、进程是CPU资源分配的最小单位，线程是CPU调度的最小单位；\n2、进程可以看做独立的应用，线程不能；\n3、线程通信需要共享一个进程，而进程之间需要通过进程通讯机制；\n"},"children":[]},{"data":{"id":"czsiwjjszi80","created":1710323000484,"text":"浏览器渲染进程的线程有哪些","note":"浏览器渲染进程的线程有五种：\n1、GUI渲染线程：解析HTML、CSS，构建DOM树、构建CSSOM树、构建渲染树和绘制页面。（重绘、重构的时候会触发这个线程）\n2、JS引擎线程：解析Javascript脚本，运行代码。一个Tab页只有一个JS引擎线程。\n3、时间触发线程 时间触发线程：控制事件循环。事件被触发时，该线程会把事件添加到待处理队列的队尾。（如setTimeOut）\n\n4、定时器触发进程 定时器触发进程：\n\n5、异步http请求线程\n\n"},"children":[]},{"data":{"id":"czsix54752g0","created":1710323047429,"text":"进程之前的通信方式"},"children":[]},{"data":{"id":"czsixcpeprs0","created":1710323063949,"text":"僵尸进程和孤儿进程是什么"},"children":[]},{"data":{"id":"czsixshoaeg0","created":1710323098310,"text":"死锁产生的原因，怎么去解决死锁的问题"},"children":[]},{"data":{"id":"czsiz1gktq80","created":1710323196199,"text":"如何实现浏览器多标签之间的通讯"},"children":[]},{"data":{"id":"czsizd2ouu00","created":1710323221481,"text":"对service worker的理解"},"children":[]}]},{"data":{"id":"czsizzpzz880","created":1710323270779,"text":"浏览器缓存"},"children":[{"data":{"id":"czsj08kqmc00","created":1710323290052,"text":"对浏览器缓存机制的理解"},"children":[]},{"data":{"id":"czsj0j2r3hc0","created":1710323312909,"text":"浏览器缓存资源的位置有哪些"},"children":[]},{"data":{"id":"czsj0q37xhs0","created":1710323328175,"text":"强缓存与协商缓存的区别"},"children":[]},{"data":{"id":"czsj10kcraw0","created":1710323350979,"text":"为什么需要浏览器缓存"},"children":[]},{"data":{"id":"czsj200syt40","created":1710323428161,"text":"点击刷新按钮、F5、Ctrl+F5、地址栏回车 有什么区别"},"children":[]}]},{"data":{"id":"czsj2y38tg80","created":1710323502319,"text":"浏览器组成"},"children":[{"data":{"id":"czsj39yyrjc0","created":1710323528182,"text":"对浏览器的理解"},"children":[]},{"data":{"id":"czsj3eub5eo0","created":1710323538784,"text":"对浏览器内核的理解"},"children":[]},{"data":{"id":"czsj3mh05480","created":1710323555394,"text":"常见的浏览器内核比较"},"children":[]},{"data":{"id":"czsj3scl9pk0","created":1710323568188,"text":"常见浏览器所用的内核"},"children":[]},{"data":{"id":"czsj3yyyn3k0","created":1710323582601,"text":"浏览器主要的组成成分"},"children":[]}]},{"data":{"id":"czsj2w9qgkg0","created":1710323498358,"text":"浏览器渲染原理","layout_mind_offset":{"x":1.1368683772161603e-13,"y":-14}},"children":[{"data":{"id":"czsj4c0wz2g0","created":1710323611017,"text":"浏览器渲染过程"},"children":[]},{"data":{"id":"czsj4hy0pjc0","created":1710323623903,"text":"浏览器渲染优化"},"children":[]},{"data":{"id":"czsj4m7p97k0","created":1710323633195,"text":"渲染的过程中遇到JS文件如何处理"},"children":[]},{"data":{"id":"czsj4wpfrls0","created":1710323656036,"text":"什么是文档的预解析"},"children":[]},{"data":{"id":"czsj56adtcw0","created":1710323676893,"text":"CSS是如何阻挡文件解析的"},"children":[]},{"data":{"id":"czsj5fv7m9c0","created":1710323697744,"text":"如何优化关键渲染路径"},"children":[]},{"data":{"id":"czsj5vhzqjk0","created":1710323731773,"text":"什么情况阻塞渲染"},"children":[]}]},{"data":{"id":"czsizxhxwdk0","created":1710323265938,"text":"浏览器本地存储"},"children":[{"data":{"id":"czsj6o5lvrk0","created":1710323794151,"text":"浏览器本地存储的方式和使用场景"},"children":[]},{"data":{"id":"czsj6yiicls0","created":1710323816699,"text":"cookie有哪些字段，作用分别是什么"},"children":[]},{"data":{"id":"czsj7idwtb40","created":1710323859956,"text":"cookie、localStorage、sessionStorage的区别"},"children":[]},{"data":{"id":"czsj7twulfk0","created":1710323885046,"text":"前端存储方式有哪些"},"children":[]},{"data":{"id":"czsj80lwqdk0","created":1710323899622,"text":"indexedDB有哪些特点"},"children":[]}]},{"data":{"id":"czsivood4zs0","created":1710322933279,"text":"浏览器同源策略"},"children":[{"data":{"id":"czsj955b3gw0","created":1710323987866,"text":"什么是同源策略"},"children":[]},{"data":{"id":"czsj9923ln40","created":1710323996379,"text":"如何解决跨域问题"},"children":[]},{"data":{"id":"czsj9hftc340","created":1710324014623,"text":"正向代理和反向代理的区别"},"children":[]},{"data":{"id":"czsj9swjbq80","created":1710324039579,"text":"Nginx的概念以及他的工作原理"},"children":[]}]},{"data":{"id":"czsjakct5z40","created":1710324099336,"text":"浏览器事件机制"},"children":[{"data":{"id":"czsjatz64ug0","created":1710324120279,"text":"事件是什么？事件模型？"},"children":[]},{"data":{"id":"czsjb08si940","created":1710324133921,"text":"如何阻止事件冒泡"},"children":[]},{"data":{"id":"czsjb65mw400","created":1710324146791,"text":"对事件委托的理解"},"children":[]},{"data":{"id":"czsjbaoi8200","created":1710324156639,"text":"事件委托的理解"},"children":[]},{"data":{"id":"czsjbj6lfgg0","created":1710324175147,"text":"事件委托的使用场景"},"children":[]},{"data":{"id":"czsjbpm9d000","created":1710324189155,"text":"同步和异步的区别"},"children":[]},{"data":{"id":"czsjbu45wbc0","created":1710324198945,"text":"对事件循环的理解"},"children":[]},{"data":{"id":"czsjc2q7hy00","created":1710324217692,"text":"宏任务和微任务分别有哪些"},"children":[]},{"data":{"id":"czsjcc8gfrs0","created":1710324238387,"text":"什么是执行栈"},"children":[]},{"data":{"id":"czsjcnh1rug0","created":1710324262851,"text":"Node中的eventLoop和浏览器中的有什么区别？process.nexttick的执行顺序"},"children":[]},{"data":{"id":"czsjdakakyo0","created":1710324313113,"text":"事件触发的顺序是怎样的"},"children":[]}]},{"data":{"id":"czsjdixwn2w0","created":1710324331350,"text":"垃圾回收机制"},"children":[{"data":{"id":"czsjdoqw53s0","created":1710324343987,"text":"V8中垃圾回收机制是怎么样的"},"children":[]},{"data":{"id":"czsjdx5db200","created":1710324362276,"text":"哪些操作会造成内存泄露"},"children":[]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}